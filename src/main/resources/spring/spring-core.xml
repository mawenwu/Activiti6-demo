<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--扫描资源文件-->
    <context:property-placeholder location="classpath:config/*.properties" ignore-unresolvable="true"/>
    
    <!-- 
    	alibaba Druid 数据源
    	通常来说，只需要修改initialSize、minIdle、maxActive。
		如果用Oracle，则把poolPreparedStatements配置为true，
		mysql可以配置为false。分库分表较多的数据库，建议配置为false。 
	-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc_url}" />
        <property name="username" value="${jdbc_username}" />
        <property name="password" value="${jdbc_password}" />
        <!-- 配置初始化大小、最小、最大 -->
      	<property name="initialSize" value="1" />
      	<property name="minIdle" value="1" /> 
      	<property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
      	<property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 申请连接的时候检测 -->
        <property name="validationQuery" value="SELECT 'x' FROM DUAL" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      	<property name="poolPreparedStatements" value="true" />
      	<property name="maxPoolPreparedStatementPerConnectionSize" value="100" />
      	<!-- 配置监控统计拦截的filters -->
      	<property name="filters" value="mergeStat" />
      	<!-- 合并SQL
      	<property name="connectionProperties" value="druid.stat.mergeSql=true" /> -->
      	<!-- StatFilter的属性slowSqlMillis用来配置SQL慢的标准（ 慢SQL记录） 超过3秒表示SQL语句慢 -->
      	<property name="connectionProperties" value="druid.stat.slowSqlMillis=3000" />
      	<!-- asyncInit是1.1.4中新增加的配置，如果有initialSize数量较多时，打开会加快应用启动时间 -->
      	<property name="asyncInit" value="true" />
    </bean>
    
	<!-- JpaVendorAdapter -->
	<bean id="JpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform" value="${jdbc_dialect}" />
    </bean>
	
    <!-- 适用于所有环境的FactoryBean，能全面控制EntityManagerFactory配置,如指定Spring定义的DataSource等等. -->
    <bean id="entityManagerFactory"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter" ref="JpaVendorAdapter"/>
        <!-- 待扫描的实体类包，不再需要persistence.xml了  -->
        <property name="packagesToScan" value="com.models.*.model" />
		<property name="jpaPropertyMap">
            <map>
               	<entry key="hibernate.hbm2ddl.auto" value="update"/>
                <entry key="hibernate.show_sql" value="${hibernate_show_sql}"/>
                <entry key="hibernate.format_sql" value="${hibernate_format_sql}"/>
            	<!--org.hibernate.cache.EhCacheRegionFactory -->
            	<!-- Enable Batching -->
                <entry key="hibernate.default_batch_fetch_size" value="10"/>
                <entry key="hibernate.jdbc.batch_size" value="20"/><!-- 允许Hibernate使用JDBC2的批量更新. 取值 建议取5到30之间的值 -->
                <entry key="hibernate.max_fetch_depth" value="3"/><!-- 设置外连接抓取树的最大深度 取值. 建议设置为0到3之间 -->
                <!-- Hibernate二级缓存相关配置 -->
	            <!-- 开启二级缓存 -->
	            <entry key="hibernate.cache.use_second_level_cache" value="true" />
	            <!-- 打开Hibernate查询缓存 -->
	            <entry key="hibernate.cache.use_query_cache" value="true" />
	            <!-- 配置缓存提供者 -->
	            <entry key="hibernate.cache.region.factory_class" value="org.hibernate.cache.ehcache.EhCacheRegionFactory" />
	            <entry key="hibernate.generate_statistics" value="true" />
            </map>
        </property>
    </bean>
	
	<!-- Spring Data JPA扫描目录 -->
	<jpa:repositories base-package="com.models" 
		repository-impl-postfix="Impl" 
        query-lookup-strategy="create-if-not-found"
        factory-class="com.base.BaseRepositoryFactoryBean"
        entity-manager-factory-ref="entityManagerFactory"
        transaction-manager-ref="transactionManager"/>
    <!-- 开启事务管理注解 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    
    <!-- JPA使用JpaTransactionManager事务管理器实现. -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
	
</beans>